name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
  
  test-frontend:
    name: Frontend Tests
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run frontend tests
        run: npm run test:frontend
      
      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: packages/frontend/coverage
  
  test-api:
    name: API Tests
    needs: lint
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_maintenance
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install Python dependencies
        run: |
          cd packages/api
          pip install -r requirements.txt
      
      - name: Run API tests
        run: |
          cd packages/api
          pytest -xvs tests/
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_maintenance
          REDIS_URL: redis://localhost:6379/1
          ENVIRONMENT: test
          TESTING: "True"
      
      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: api-coverage
          path: packages/api/coverage
  
  build:
    name: Build Application
    needs: [test-frontend, test-api]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            packages/frontend/dist
            packages/api/dist
            packages/api-client/dist
            packages/shared/dist
  
  sonarcloud:
    name: SonarCloud Analysis
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download all coverage reports
        uses: actions/download-artifact@v4
        with:
          pattern: "*-coverage"
          path: coverage-reports
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=maintenance-monorepo
            -Dsonar.organization=yourorganization
            -Dsonar.sources=packages
            -Dsonar.tests=packages/*/tests/,packages/*/test/,packages/*/__tests__/
            -Dsonar.javascript.lcov.reportPaths=coverage-reports/frontend-coverage/lcov.info
            -Dsonar.python.coverage.reportPaths=coverage-reports/api-coverage/coverage.xml