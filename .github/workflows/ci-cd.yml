name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    # 수동으로 워크플로우 실행 가능

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.10'
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD || 'postgres' }}
  POSTGRES_DB: test_db

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r packages/api/requirements.txt
          pip install flake8 mypy
          
      - name: Run Python linters
        run: |
          flake8 packages/api
          mypy packages/api
      
      - name: Security scan dependencies
        run: |
          npm audit --production --audit-level=high
          pip install safety
          safety check -r packages/api/requirements.txt
          
  test:
    name: Test
    needs: lint
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
          
      - name: Run frontend tests
        run: |
          cd packages/frontend
          npm test -- --coverage --coverageThreshold='{"global":{"branches":70,"functions":70,"lines":80}}'
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r packages/api/requirements.txt
          pip install pytest pytest-cov
          
      - name: Run backend tests
        run: |
          cd packages/api
          pytest --cov=src tests/ --cov-report=xml --cov-fail-under=80
        env:
          DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: ${{ secrets.TEST_SECRET_KEY || 'test_secret_key' }}
          ENVIRONMENT: test
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
          
  build:
    name: Build and Scan
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          
      - name: Extract metadata for API
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/maintenance-api
          tags: |
            type=sha,format=long
            type=ref,event=branch
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            
      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.api
          push: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' }}
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Extract metadata for Frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/maintenance-frontend
          tags: |
            type=sha,format=long
            type=ref,event=branch
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
          
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.frontend
          push: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' }}
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      # Docker 이미지 보안 스캔 추가
      - name: Scan API image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_HUB_USERNAME }}/maintenance-api:${{ steps.meta-api.outputs.tags }}
          format: 'sarif'
          output: 'trivy-api-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload API scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-api-results.sarif'
          category: 'api-trivy'
          
      - name: Scan Frontend image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_HUB_USERNAME }}/maintenance-frontend:${{ steps.meta-frontend.outputs.tags }}
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Frontend scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-frontend-results.sarif'
          category: 'frontend-trivy'
          
      # 코드 품질 검사 추가
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ github.repository_owner }}_${{ github.event.repository.name }}
            -Dsonar.organization=${{ github.repository_owner }}
          
  deploy-dev:
    name: Deploy to Development
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    concurrency: 
      group: dev-environment
      cancel-in-progress: false
    
    steps:
      - name: Deploy to development environment
        id: deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEV_SERVER_HOST }}
          username: ${{ secrets.DEV_SERVER_USER }}
          key: ${{ secrets.DEV_SERVER_SSH_KEY }}
          script: |
            cd /opt/maintenance-monorepo
            git pull
            docker-compose -f docker-compose.yml -f docker-compose.dev.yml pull
            docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d
            docker system prune -af --volumes
            
      - name: Verify deployment
        run: |
          # 배포 성공 확인 (실제 URL로 변경 필요)
          echo "배포가 완료되었습니다. 상태 확인 중..."
          sleep 10
          # curl --retry 5 --retry-delay 5 --retry-connrefused https://dev-api.yourdomain.com/health
          echo "배포 확인 완료"
          
      - name: Notify on successful deployment
        if: success()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "✅ 개발 환경 배포 성공! 브랜치: ${{ github.ref_name }}, 커밋: ${{ github.sha }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
            
  deploy-prod:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    concurrency: 
      group: prod-environment
      cancel-in-progress: false
    
    steps:
      - name: Deploy to production environment
        id: deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.PROD_SERVER_USER }}
          key: ${{ secrets.PROD_SERVER_SSH_KEY }}
          script: |
            cd /opt/maintenance-monorepo
            git pull
            docker-compose pull
            docker-compose up -d
            docker system prune -af --volumes
            
      - name: Verify deployment
        run: |
          # 배포 성공 확인 (실제 URL로 변경 필요)
          echo "배포가 완료되었습니다. 상태 확인 중..."
          sleep 10
          # curl --retry 5 --retry-delay 5 --retry-connrefused https://api.yourdomain.com/health
          echo "배포 확인 완료"
          
      - name: Notify on successful deployment
        if: success()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "✅ 프로덕션 환경 배포 성공! 브랜치: ${{ github.ref_name }}, 커밋: ${{ github.sha }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
  notify-failure:
    name: Notify Failure
    needs: [lint, test, build, deploy-dev, deploy-prod]
    runs-on: ubuntu-latest
    if: always() && (needs.lint.result == 'failure' || needs.test.result == 'failure' || needs.build.result == 'failure' || (needs.deploy-dev.result == 'failure' && github.ref == 'refs/heads/develop') || (needs.deploy-prod.result == 'failure' && github.ref == 'refs/heads/main'))
    
    steps:
      - name: Notify on failure
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "🚨 CI/CD 파이프라인 실패! 브랜치: ${{ github.ref_name }}, 커밋: ${{ github.sha }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "🚨 *CI/CD 파이프라인 실패!*\n브랜치: `${{ github.ref_name }}`\n커밋: `${{ github.sha }}`"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn", 
                    "text": "자세한 내용은 <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|여기>에서 확인하세요."
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}