generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Vehicle {
  id                String              @id @default(uuid())
  vin               String              @unique
  make              String
  model             String
  year              Int
  type              VehicleType
  color             String?
  plate             String?             @unique
  mileage           Int?
  status            VehicleStatus       @default(AVAILABLE)
  ownerID           String?             @map("owner_id")
  lastServiceDate   DateTime?           @map("last_service_date")
  nextServiceDate   DateTime?           @map("next_service_date")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  
  // 관계
  owner             User?               @relation(fields: [ownerID], references: [id], onDelete: SetNull)
  maintenanceRecords MaintenanceRecord[]
  documents         VehicleDocument[]
  telemetry         Telemetry?

  @@map("vehicles")
  @@index([make, model])
  @@index([status])
  @@index([ownerID])
  @@index([lastServiceDate])
  @@index([nextServiceDate])
}

enum VehicleType {
  SEDAN
  SUV
  TRUCK
  VAN
  ELECTRIC
  HYBRID
}

enum VehicleStatus {
  AVAILABLE
  MAINTENANCE
  RESERVED
  INACTIVE
  RECALLED
}

model MaintenanceRecord {
  id          String               @id @default(uuid())
  vehicleID   String               @map("vehicle_id")
  description String
  date        DateTime
  mileage     Int?
  cost        Float?
  performedBy String?              @map("performed_by")
  status      MaintenanceStatus    @default(SCHEDULED)
  notes       String?
  createdAt   DateTime             @default(now()) @map("created_at")
  updatedAt   DateTime             @updatedAt @map("updated_at")
  
  // 관계
  vehicle     Vehicle              @relation(fields: [vehicleID], references: [id], onDelete: Cascade)
  parts       MaintenancePart[]
  documents   MaintenanceDocument[]

  @@map("maintenance_records")
  @@index([vehicleID])
  @@index([date])
  @@index([status])
  @@index([vehicleID, status])
  @@index([vehicleID, date])
  @@index([date, status])
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model MaintenancePart {
  id              String            @id @default(uuid())
  maintenanceID   String            @map("maintenance_id")
  name            String
  partNumber      String?           @map("part_number")
  quantity        Int               @default(1)
  unitCost        Float?            @map("unit_cost")
  totalCost       Float?            @map("total_cost")
  
  // 관계
  maintenance     MaintenanceRecord @relation(fields: [maintenanceID], references: [id], onDelete: Cascade)

  @@map("maintenance_parts")
  @@index([maintenanceID])
  @@index([partNumber])
}

model VehicleDocument {
  id          String    @id @default(uuid())
  vehicleID   String    @map("vehicle_id")
  name        String
  type        String
  fileURL     String    @map("file_url")
  uploadDate  DateTime  @default(now()) @map("upload_date")
  expiryDate  DateTime? @map("expiry_date")
  size        Int?
  
  // 관계
  vehicle     Vehicle   @relation(fields: [vehicleID], references: [id], onDelete: Cascade)

  @@map("vehicle_documents")
  @@index([vehicleID])
  @@index([uploadDate])
  @@index([expiryDate])
  @@index([type])
}

model MaintenanceDocument {
  id            String           @id @default(uuid())
  maintenanceID String           @map("maintenance_id")
  name          String
  type          String
  fileURL       String           @map("file_url")
  uploadDate    DateTime         @default(now()) @map("upload_date")
  size          Int?
  
  // 관계
  maintenance   MaintenanceRecord @relation(fields: [maintenanceID], references: [id], onDelete: Cascade)

  @@map("maintenance_documents")
  @@index([maintenanceID])
  @@index([uploadDate])
  @@index([type])
}

model Telemetry {
  id              String    @id @default(uuid())
  vehicleID       String    @unique @map("vehicle_id")
  connectionStatus String    @map("connection_status")
  lastPing        DateTime? @map("last_ping")
  batteryLevel    Float?    @map("battery_level")
  fuelLevel       Float?    @map("fuel_level")
  engineTemp      Float?    @map("engine_temp")
  oilLevel        Float?    @map("oil_level")
  latitude        Float?
  longitude       Float?
  diagnosticCodes String[]  @map("diagnostic_codes")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  // 관계
  vehicle         Vehicle   @relation(fields: [vehicleID], references: [id], onDelete: Cascade)

  @@map("telemetry")
  @@index([connectionStatus])
  @@index([lastPing])
}

model User {
  id        String      @id @default(uuid())
  email     String      @unique
  name      String
  password  String
  role      UserRole    @default(CUSTOMER)
  isActive  Boolean     @default(true) @map("is_active")
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  
  // 관계
  vehicles      Vehicle[]
  profile       UserProfile?
  todos         Todo[]
  notifications Notification[]
  todoTemplates TodoTemplate[]

  @@map("users")
  @@index([email])
  @@index([role])
  @@index([isActive])
}

enum UserRole {
  ADMIN
  MANAGER
  TECHNICIAN
  CUSTOMER
}

model UserProfile {
  id        String   @id @default(uuid())
  userID    String   @unique @map("user_id")
  phone     String?
  address   String?
  company   String?
  avatarURL String?  @map("avatar_url")
  
  // 관계
  user      User     @relation(fields: [userID], references: [id], onDelete: Cascade)

  @@map("user_profiles")
  @@index([userID])
  @@index([phone])
}

model Todo {
  id          String    @id @default(uuid())
  title       String
  description String?
  completed   Boolean   @default(false)
  dueDate     DateTime? @map("due_date")
  priority    String    @default("medium")
  status      String    @default("pending")
  vehicleId   String?   @map("vehicle_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  userId      String?   @map("user_id")
  
  // 관계
  vehicle     Vehicle?  @relation(fields: [vehicleId], references: [id], onDelete: SetNull)
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@map("todos")
  @@index([vehicleId])
  @@index([userId])
  @@index([dueDate])
  @@index([priority])
  @@index([status])
  @@index([completed])
  @@index([userId, completed])
  @@index([vehicleId, completed])
  @@index([userId, status])
  @@index([dueDate, priority])
  @@index([userId, vehicleId, completed])
}

// 알림 관련 모델
model Notification {
  id          String    @id @default(uuid())
  userId      String    @map("user_id")
  title       String
  content     String
  type        String    @default("info") // info, warning, error, success
  isRead      Boolean   @default(false) @map("is_read")
  createdAt   DateTime  @default(now()) @map("created_at")
  
  // 관계
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
}

// 템플릿 관련 모델
model TodoTemplate {
  id          String    @id @default(uuid())
  name        String
  description String?
  category    String    @default("general")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  userId      String?   @map("user_id")
  
  // 관계
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  items       TodoTemplateItem[]
  
  @@map("todo_templates")
  @@index([userId])
  @@index([category])
}

model TodoTemplateItem {
  id            String       @id @default(uuid())
  templateId    String       @map("template_id")
  title         String
  description   String?
  priority      String       @default("medium")
  status        String?
  dueDate       String?      @map("due_date")
  order         Int          @default(0)
  
  // 관계
  template      TodoTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  @@map("todo_template_items")
  @@index([templateId])
  @@index([priority])
} 